<?php

function hello($greeting)
{
    echo "<h1>" . "$greeting" . "</h1>";
}

/**
 * Get value from GET variable or return default value.
 *
 * @param string $key     to look for
 * @param mixed  $default value to set if key does not exists
 *
 * @return mixed value from GET or the default value
 */
function getGet($key, $default = null)
{
    return isset($_GET[$key])
        ? $_GET[$key]
        : $default;
}
/**
 * Get value from POST variable or return default value.
 *
 * @param mixed $key     to look for, or value array
 * @param mixed $default value to set if key does not exists
 *
 * @return mixed value from POST or the default value
 */
function getPost($key, $default = null)
{
    if (is_array($key)) {
        // $key = array_flip($key);
        // return array_replace($key, array_intersect_key($_POST, $key));
        foreach ($key as $val) {
            $post[$val] = getPost($val);
        }
        return $post;
    }
    return isset($_POST[$key])
        ? $_POST[$key]
        : $default;
}
/**
 * Check if key is set in POST.
 *
 * @param mixed $key     to look for
 *
 * @return boolean true if key is set, otherwise false
 */
function hasKeyPost($key)
{
    return array_key_exists($key, $_POST);
}
/**
 * Sanitize value for output in view.
 *
 * @param string $value to sanitize
 *
 * @return string beeing sanitized
 */
function esc($value)
{
    return htmlentities($value);
}
/**
 * Create a slug of a string, to be used as url.
 *
 * @param string $str the string to format as slug.
 *
 * @return str the formatted slug.
 */
function slugify($str)
{
    $str = mb_strtolower(trim($str));
    $str = str_replace(array('å','ä','ö'), array('a','a','o'), $str);
    $str = preg_replace('/[^a-z0-9-]/', '-', $str);
    $str = trim(preg_replace('/-+/', '-', $str), '-');
    return $str;
}


function mergeQueryString($options, $prepend = "?")
{
    // Parse querystring into array
    $query = [];
    parse_str($_SERVER["QUERY_STRING"], $query);

    // Merge query string with new options
    $query = array_merge($query, $options);

    // Build and return the modified querystring as url
    return $prepend . http_build_query($query);
}

function orderby($column, $app)
{
    if (strpos($app->request->getRoute(), 'search') !== false) {
        return;
    }
    $asc = mergeQueryString(["orderby" => $column, "order" => "asc"]);
    $desc = mergeQueryString(["orderby" => $column, "order" => "desc"]);

    return <<<EOD
<span class="orderby">
<a href="$asc">&darr;</a>
<a href="$desc">&uarr;</a>
</span>

EOD;
}

// If a value is empty return true
function valueController($array)
{
    foreach ($array as $val) {
        if (strlen(strval($val)) <= 0) {
            return true;
        }
    }
    return false;
}

function sqlString($indexString, $operators)
{
    // create array with the sent in string
    $pieces = explode(",", $indexString);

    // prepare SQL statement again with wildcards
    foreach ($pieces as $key => $value) {
        $pieces[$key] = "'%" . $value . "%'";
    }

    // return string with operator for multiple "LIKEs" and "ANDs" and "ORs"
    return implode($operators, $pieces);
}


// create A href based on current merger.
// If in current GET, then a click on that one will remove itself from the GET.
// If not in GET it will add it do the current GET
function categoryController($app)
{
    // get GET "cat"
    $cat = getGet("cat", "");

    // get all possible Categories
    $resCat = $app->connect->getAllRes("SELECT * FROM Shop_ProdCategory");

    foreach ($resCat as $k) {
        // Control category in the current GET
        if (strpos($cat, $k["category"]) !== false) {
            $newstr = str_replace($k["category"], "", $cat);
            echo '<li><a href='. mergeQueryString(["cat" => $newstr]) .'>'. $k["category"] .'[X]</a></li>';
        } else {
            echo '<li><a href='. mergeQueryString(["cat" => $cat . "," . $k["category"]]) .'>'. $k["category"] .' []</a></li>';
        }
    }
}

